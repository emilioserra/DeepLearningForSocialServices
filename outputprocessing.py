 
"""

Code to generate a report from the experiments oputput generated by analysis.py and models.py

@author: Emilio Serrano and Javier Bajo

"""



import csv
from operator import itemgetter
 


#aux function to clean data from parameters of one experiments
#receives a json with parameters. E.g. Model parameters: 	{'activationFunction': 'relu', 'batch_size': 64, 'dropoutRate': 0.5696707206550694, 'epochs': 100, 'hiddenLayers': 1, 'neuronsPerLayers': 256, 'optimizer': 'sgd'}
#returns a list with just the values
def cleanParametersExperiment(experimentParameters):
      #clearning a little the experiments in the list
    cleanParameters=[]
    for p in experimentParameters:         
        index =p.find(":")
        index2=p.find("dropoutRate") #to get just 4 decimals in the number
        if(index!=-1):
            p = p[index+2:]
        if(index2!=-1):
            p =str(round(float(p),4))
        p = p.replace("'", "")
        cleanParameters.append(p)
    return cleanParameters

def writeCSV(fileName, head, body):        
    with open(fileName,  "w", newline='') as f: #write the csv output file
        writer = csv.writer(f)
        writer.writerow(head)    
        writer.writerows(body) 
    
    
    
    
    
if __name__ == '__main__':


    # fix random seed for reproducibility
    seed = 123
    experimentsFile='./output/1K.txt'  #file with expeirments output from models.py
    
    
    resultsPreface='Acc,AccV,Prec,Recall: 	[' #how metrics start in the experiment file
    parametersPreface= 'Model parameters: 	{' # how parameters start in experiment file 

    
    with open(experimentsFile) as f: #all lines in list of list lines
        lines = f.readlines() 
     
    experiments=[] # list of list with all experiments data
    results=[]  
    parameters=[]
    
    for line in lines: #for each line in the list
        if(line.startswith(resultsPreface)):            
            results = line[len(resultsPreface): -2].split(",") #substring considering preface and to list           
        if (line.startswith(parametersPreface)):
            parameters= cleanParametersExperiment(line[len(parametersPreface): -2].split(",") )  #substring considering preface and to list           
        if(parameters): #parameters is used as a flag, if list with something, store experiment            
            experiments.append(results+parameters)  
            parameters=[]#empty flag
 
    
    headCSV= ['AccT', 'Acc',  'Prec', 'Recall', 'activation', 'batch', 'dropout', 'epochs', 'hLayers', 'neuronsPL', 'optimizer' ]
    writeCSV('./output/1K.csv',headCSV, sorted(experiments, key = itemgetter(1),reverse=True)  )
    writeCSV('./output/1KbyPrec.csv',headCSV, sorted(experiments, key = itemgetter(2),reverse=True)  )
  

       
       